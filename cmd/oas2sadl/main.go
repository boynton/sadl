package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"strings"

	"github.com/boynton/sadl"
	"github.com/boynton/sadl/oas"
)

var verbose bool = false

func main() {
	pVerbose := flag.Bool("v", false, "set to true to enable verbose output")
	pDebug := flag.Bool("d", false, "set to true to dump data structure instead of decompile")
	pRefactorEnums := flag.Bool("e", false, "set to refactor inline string enum defs into separate types")
	flag.Parse()
	args := flag.Args()
	if len(args) != 1 {
		fmt.Println("usage: oas2sadl file")
		os.Exit(1)
	}
	verbose = *pVerbose
	path := args[0]
	name := path
	n := strings.LastIndex(name, "/")
	format := ""
	if n >= 0 {
		name = name[n+1:]
	}
	n = strings.LastIndex(name, ".")
	if n >= 0 {
		format = name[n+1:]
		name = name[:n]
		name = strings.Replace(name, ".", "_", -1)
	}
	data, err := ioutil.ReadFile(path)
	if err != nil {
		fmt.Printf("oas2sadl: Cannot read source file: %v\n", err)
		os.Exit(1)
	}
	oas3, err := oas.Parse(data, format)
	if err != nil {
		fmt.Printf("oas2sadl: Cannot import OpenAPI document: %v\n", err)
		os.Exit(1)
	}
	oas.EnumTypes = *pRefactorEnums
	model, err := oas3.ToSadl(name)
	if err != nil {
		fmt.Printf("oas2sadl: Cannot convert to SADL: %v\n", err)
		os.Exit(1)
	}
	if *pRefactorEnums {
		err = model.ConvertInlineEnums()
		if err != nil {
			fmt.Printf("oas2sadl: Cannot refactor enums: %v\n", err)
			os.Exit(1)
		}
	}
	if *pDebug {
		fmt.Println(sadl.Pretty(model)) //debug
	} else {
		fmt.Println("/* Generated by oas2sadl */\n\n" + sadl.Decompile(model))
	}
}
