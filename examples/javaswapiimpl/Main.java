//
// Sample server main program generated by sadl2java, with simple implementation added.
//
import org.eclipse.jetty.server.Server;
import org.glassfish.jersey.jetty.JettyHttpContainerFactory;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.hk2.utilities.binding.AbstractBinder;
import org.glassfish.jersey.jackson.JacksonFeature;
import javax.ws.rs.core.UriBuilder;
import java.io.IOException;
import java.net.URI;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import model.*;

public class Main {

    public static String BASE_URI = "http://localhost:8080/";

    public static void main(String[] args) {
        try {
            Server server = startServer(new SwapiImpl());
            server.join();
        } catch (Exception e) {
            System.err.println("*** " + e);
        }
    }

    public static Server startServer(SwapiImpl impl) throws Exception {
        URI baseUri = UriBuilder.fromUri(BASE_URI).build();
        ResourceConfig config = new ResourceConfig(SwapiResources.class);
        config.registerInstances(new AbstractBinder() {
                @Override
                protected void configure() {
                    bind(impl).to(SwapiService.class);
                }
            });
        Server server = JettyHttpContainerFactory.createServer(baseUri, config);
        server.start();
        System.out.println(String.format("Service started at %s", BASE_URI));
        return server;
    }


    // Stubs for an implementation of the service follow

    static class SwapiImpl implements SwapiService {

        Map<String,Part> parts;
        Map<String,Film> films;
        public SwapiImpl() {
            parts = new HashMap<String,Part>();
            Part part1 = new model.Part().id("1").name("R2-D2");
            Part part2 = new model.Part().id("2").name("Han Solo");
            parts.put("1", part1);
            parts.put("2", part2);
            films = new HashMap<String,Film>();
            films.put("4", new model.Film().id("4").name("A New Hope").cast(Arrays.asList(part1, part2)));
            films.put("5", new model.Film().id("5").name("The Empire Strikes Back"));
        }
        public GetPartResponse getPart(GetPartRequest req) {
            return new GetPartResponse().part(parts.get(req.id));
        }

        public GetFilmResponse getFilm(GetFilmRequest req) {
            return new GetFilmResponse().film(films.get(req.id));
        }

        public ListPartsResponse listParts(ListPartsRequest req) {
            ListPartsResponse resp = new ListPartsResponse();
            resp.parts = new ArrayList<model.Part>();
            for (Map.Entry<String,Part> kv : parts.entrySet()) {
                resp.parts.add(kv.getValue());
            }
            return resp;
        }

        public ListFilmsResponse listFilms(ListFilmsRequest req) {
            ListFilmsResponse resp = new ListFilmsResponse();
            resp.films = new ArrayList<model.Film>();
            for (Map.Entry<String,Film> kv : films.entrySet()) {
                resp.films.add(kv.getValue());
            }
            return resp;
        }

    }
}
