//schema comment line 1. Line comments get preserved with the closest element in the schema, these first few are schema comments
namespace tests //line 2: For java, this means com.boynton.tests.basictypes, for go github.com/boynton/tests/basictypes
name basictypes //line 3 for the schema
version 1 //line 4 for the schema

/* Block comments get totally ignored.
   The following is not yet implemented:
   include "names.sadl"
*/

//And this comment gets attached to the type SimpleName
type SimpleName String (pattern="[a-zA-Z_][a-zA-Z_0-9]*")
type CompoundName String (pattern="([a-zA-Z_][a-zA-Z_0-9]*\\.)*[a-zA-Z_][a-zA-Z_0-9]*")

//options comment
type Options Enum {
	ONE //the first element
	TWO (x_second) //the middle element
	THREE //the last element
}

type NonSymbolicOptions String (values=["a:b","c:d","e:f"])

//AlphaName def
type AlphaName String (pattern="[a-zA-Z_]+") //one or more alpha characters

/* note that semicolons are optional */
type StringTest Struct {
	name SimpleName (required);
	parent CompoundName (required);
	names Array<SimpleName>; //names comment
}

example StringTest {
	"name": "foo23",
	"parent": "foo.bar",
	"names": ["one", "two", "three"]
}

example StringTest.name "foo23"

type NakedStruct Struct

type AZaz String (pattern="[a-zA-Z]+")
type TinyInt Int8
type SmallInt Int16
type RegularInt Int32
type LargeInt Int64
type RegularFloat Float32
type LargeFloat Float64
type HugeNumber Decimal

type Year Int32 (min=1000, max=3000)
type Latitude Float64 (min=-90,max=90)
type Pi Float64 (min=3.0 , max=3.5)
type LongNumber Int64 (min=500000 ,max=10000000)
type NumberBigFraction Decimal (max=3.141592653589793238462643383279502884197169399375105819)
type BigNumber Decimal (max=3141592653589793238462643383279502884197169399375105819)


type MapTest Struct {
	locations Map<String,Int32>
}

example MapTest {
	"locations": {
		"one": 1,
		"two": 2
	}
}

type ArrayOfInt Array<Int32> (maxsize=3)
type MapArrayTest Struct {
	locations Map<String,ArrayOfInt>
}

type IntOOBTest Struct {
	theyear   Year
}

type NegativeNumberTest Struct {
	mylatitude Latitude
}

type UUIDTest Struct {
	myid UUID
}

type TimestampTest Struct {
	mytime Timestamp
}

type Test Struct {
	name String (required)
	utfname String (required)
	mybool Bool (required)
	mybool2 Bool (required)
	myint Int32 (required)
	mylong Int64 (required)
	mydbl Float64 (required)
	intarray ArrayOfInt
	mynestedstruct Struct {
		something String
		orAnother Int32
	} (default={"something": "foo", "orAnother": 23})
	my_int_array Array<Int32> (required)
	my_str_array Array<String> (required)
	myuuid UUID (required)
	myaz AZaz (required)
	myyear Year (required)
	mypi Pi (required)
	myotherlong LongNumber (required)
	mytime Timestamp (required)
	myoptions Options (required)
	co1 NonSymbolicOptions (required)
	co2 String (values=["a:b","c:d","e:f"], required)
	co3 NonSymbolicOptions
}
