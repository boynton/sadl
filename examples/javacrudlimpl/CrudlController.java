//
// Generated by sadl
//

import example.crudl.*;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.UUID;
import java.time.Instant;

//
// A memory-based implementation of the service
//
public class CrudlController implements Crudl {
   
    Map<UUID,Item> storage = new HashMap<UUID,Item>();
    
    public CreateItemResponse createItem(CreateItemRequest req) {
        Item item = req.getItem();
        UUID key = item.getId();
        synchronized (storage) {
            if (storage.containsKey(key)) {
                throw new BadRequest("Already exists: " + key);
            }
            item = Item.builder().id(key).modified(Instant.now()).data(item.getData()).build();
            storage.put(key, item);
        }
        return CreateItemResponse.builder().item(item).build();
    }
    
    public GetItemResponse getItem(GetItemRequest req) {
        UUID key = req.getId();
        synchronized (storage) {
            if (!storage.containsKey(key)) {
                throw new NotFound("Item not found: " + key);
            }
            Item item = storage.get(key);
            Instant modified = item.getModified();
            Instant since = req.getIfNewer();
            if (since != null) {
                if (modified.isBefore(since)) {
                    throw new NotModified();
                }
            }
            return GetItemResponse.builder().item(item).modified(item.getModified()).build();
        }
    }
    
    public PutItemResponse putItem(PutItemRequest req) {
        Item item = req.getItem();
        UUID key = item.getId();
        synchronized (storage) {
            if (!storage.containsKey(key)) {
                throw new NotFound("Item not found: " + key);
            }
            item = Item.builder().id(key).modified(Instant.now()).data(item.getData()).build();
            storage.put(key, item);
            return PutItemResponse.builder().item(item).build();
        }
    }
    
    public DeleteItemResponse deleteItem(DeleteItemRequest req) {
        UUID key = req.getId();
        synchronized (storage) {
            if (!storage.containsKey(key)) {
                throw new NotFound("Item not found: " + key);
            }
            storage.remove(key);
            return new DeleteItemResponse();
        }
    }
    
    public ListItemsResponse listItems(ListItemsRequest req) {
        List<Item> lst = new ArrayList<Item>();
        UUID next = null;
        int count = 0;
        int limit = req.getLimit();
        UUID skip = req.getSkip();
        for (Map.Entry<UUID,Item> e : storage.entrySet()) {
            UUID key = e.getKey();
            if (skip != null) {
                if (!skip.equals(key)) {
                    continue;
                }
                skip = null;
            }
            count++;
            if (count > limit) {
                next = e.getKey();
                break;
            }
            lst.add(e.getValue());
        }
        return ListItemsResponse.builder().items(ItemList.builder().items(lst).next(next).build()).build();
    }
    
}
