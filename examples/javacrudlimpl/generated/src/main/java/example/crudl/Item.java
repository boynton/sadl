//
// Generated by sadl
//
package example.crudl;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.Instant;
import java.util.UUID;
import javax.validation.constraints.NotNull;

//The items to be stored.
@JsonDeserialize(builder = Item.ItemBuilder.class)
public class Item {
    //The id is always provided by the client
    @NotNull
    private final UUID id;

    //The modified time is managed by the server
    @JsonInclude(JsonInclude.Include.NON_EMPTY) /* Optional field */
    @JsonDeserialize(using = Util.InstantDeserializer.class)
    @JsonSerialize(using = Util.InstantSerializer.class)
    private final Instant modified;

    //Other fields are arbitrary, this services just preserves them, but otherwise doesn't use them
    @JsonInclude(JsonInclude.Include.NON_EMPTY) /* Optional field */
    private final String data;

    public Item(UUID id, Instant modified, String data) {
        this.id = id;
        this.modified = modified;
        this.data = data;
    }

    public UUID getId() {
        return id;
    }

    public Instant getModified() {
        return modified;
    }

    public String getData() {
        return data;
    }

    public static ItemBuilder builder() {
        return new ItemBuilder();
    }

    @JsonPOJOBuilder(withPrefix="")
    public static class ItemBuilder {
        private UUID id;
        private Instant modified;
        private String data;

        public ItemBuilder id(UUID id) {
            this.id = id;
            return this;
        }

        public ItemBuilder modified(Instant modified) {
            this.modified = modified;
            return this;
        }

        public ItemBuilder data(String data) {
            this.data = data;
            return this;
        }

        public Item build() {
            return new Item(id, modified, data);
        }
    }
}
