//
// A CRUDL storage service as an example HTTP Web Service
//
name Crudl
namespace example
version "1"

//
// Items use this restricted string as an identifier
//
type ItemId String (pattern="^[a-zA-Z_][a-zA-Z_0-9]*$")

//
// The items to be stored.
//
type Item Struct {
	id ItemId (required) // The id is always provided by the client
	modified Timestamp   // The modified time is managed by the server
	data String          // Other fields like this are not used by the server, but preserved.
}

//
// A paginated list of items
//
type ItemListing Struct {
	items Array<Item> (required) // The array is always returned, even if empty.
	next ItemId                  // The token to skip to the next batch is returned only if there are more.
}

//
// If not modified, this is the response, with no content. "NotModified" is only used for the app to
// throw the exception. i.e. in Java: throw new ServiceException(new NotModified())
//
type NotModified Struct {
	message String
}

type BadRequest Struct {
	message String
}

type NotFound Struct {
	message String
}


//
// Create the item. The item with the updated modified time is returned.
//
http POST "/items" (action=CreateItem) {
	item Item // The new item
	
	// The expected response upon creation of the item in the store
	expect 201 {
		item Item
	}
	
	// The response if the item or the id is malformed in any way. Each except type can only occur
	// once, but multiple types can have that code.
	except 400 BadRequest
}

//
// Get the item with the specified id. Conditional response is provided to avoid sending the item
// over the wire if it has not changed.
//
http GET "/items/{id}" (action=GetItem) {
	id ItemId
	ifNewer Timestamp (header="If-Modified-Since")
	
	// The expected response with the item
	expect 200 {
		item Item
		modified Timestamp (header="Modified") // Just an example of output headers
	}
	
	//no content if the modified time has not changed
	except 304 NotModified
	
	//not found
	except 404 NotFound
}

//
// Update the item. The item with the updated modified time is returned.
//
http PUT "/items/{id}" (action=PutItem) {
	id ItemId
	item Item // The new item
	
	// The expected response if the item exists and was updated
	expect 200 {
		item Item
	}
	
	// The response if the item or the id is malformed in any way
	except 400 BadRequest
}

//
// Delete the item from the store.
//
http DELETE "/items/{id}" (action=DeleteItem) {
	id ItemId // The id of the item
	
	// The expected response has no content
	expect 204 {
	}
	
	// The response if the id is not found in the store
	except 404 NotFound
}

//
// List the items. By default only 10 items are returned, but that can be overridden with a query
// parameter. If more items are available than the limit, then a "next" token is returned, which can
// be provided with a subsequent call as the "skip" query parameter.
//
http GET "/items?limit={limit}&skip={skip}" (action=ListItems) {
	limit Int32 (default=10)
	skip ItemId
	
	//return a list
	expect 200 {
		items ItemListing
	}
}

